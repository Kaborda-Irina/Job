apiVersion: v1
kind: Pod
metadata:
  name: full-sidecar-pod
spec:
  containers:
    - name: postgres
      image: postgres:10                 # The container image
      imagePullPolicy: "IfNotPresent"
      lifecycle:
        postStart:
          exec:
            command: [ "/bin/sh","-c","sleep 20 && PGPASSWORD=$POSTGRES_PASSWORD psql -w -d $POSTGRES_DB -U $POSTGRES_USER -c 'CREATE TABLE IF NOT EXISTS hashfiles ( id           BIGSERIAL PRIMARY KEY,fileName     VARCHAR NOT NULL,fullFilePath TEXT    NOT NULL,algorithm    VARCHAR NOT NULL, hashSum      VARCHAR NOT NULL, deleted      BOOLEAN DEFAULT false);'" ]
      envFrom: # Get the environmental variables from a secret file whose name is "postgres-secret"
          - secretRef:
              name: postgres-secret
      ports:
          - containerPort: 5432                   # The port that the container exposes
            name: postgres
      volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: job-volume

    - name: hasher-container
      image: upgrade:latest
      imagePullPolicy: Never
      ports:
        - name: http
          containerPort: 9090                   # Should match the port number that the Go application listens on
      envFrom:
          - secretRef:
              name: postgres-secret
      command: [ "sh","-c","./sha256sum $FLAG_D $TEXT" ]
      env:
          - name: TEXT
            value: "../../my_files/persistent-volume"
          - name: FLAG_D
            value: "-d"
      volumeMounts:
          - name: job-volume
            mountPath: /my_files


    - name: sidecar-container
      image: app_sidecar:latest
      imagePullPolicy: Never
      envFrom:
        - secretRef:
            name: postgres-secret
      command: [ "sh","-c","while true; do ./appCron $FLAG $TEXT;sleep 30;done" ]

      env:
        - name: TEXT
          value: "../../my_files/persistent-volume"
        - name: FLAG
          value: "-c"
      volumeMounts:
        - name: job-volume
          mountPath: /my_files




  volumes:
    - name: job-volume
      persistentVolumeClaim:
        claimName: my-persistent-volumeclaim

  restartPolicy: Always